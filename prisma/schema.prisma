generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  name        String   @db.VarChar(255)
  description String   @db.Text
  userId      String
  forms       Form[]
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Form {
  id                   String       @id @default(cuid())
  createdAt            DateTime     @default(now())
  name                 String       @db.VarChar(255)
  submissionCount      Int          @default(0)
  notificationSettings Json
  settings             Json
  projectId            String
  submissions          Submission[]
  fields               Field[]
  project              Project      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectId])
}

model Field {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  key       String
  label     String    @db.VarChar(255)
  type      FieldType
  required  Boolean
  formId    String
  form      Form      @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([formId])
}

model Submission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  rawdata   Json
  formId    String   @db.VarChar(255)
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([formId])
}

enum FieldType {
  TEXT
  NUMBER
  EMAIL
  DATE
  CHECKBOX
  RADIO
  SELECT
  TEXTAREA
}
