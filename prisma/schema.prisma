// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password String
  name     String
  role     Role      @relation(fields: [roleId], references: [id])
  roleId   String
  projects Project[]
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  name        String   @db.VarChar(255)
  description String   @db.Text
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.VarChar(255)
  forms       Form[]
}

model Form {
  id                   String       @id @default(cuid())
  createdAt            DateTime     @default(now())
  name                 String       @db.VarChar(255)
  project              Project      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId            String       @db.VarChar(255)
  submissions          Submission[]
  submissionCount      Int          @default(0)
  fields               Field[]
  notificationSettings Json         @default("{}")
}

model Field {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  key       String
  label     String    @db.VarChar(255)
  type      FieldType
  form      Form      @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId    String    @db.VarChar(255)
  required  Boolean
}

enum FieldType {
  TEXT
  NUMBER
  EMAIL
  DATE
  CHECKBOX
  RADIO
  SELECT
  TEXTAREA
}

model Submission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId    String   @db.VarChar(255)
  data      Json
}
