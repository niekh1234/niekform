generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password String
  name     String
  roleId   String
  projects Project[]
  role     Role      @relation(fields: [roleId], references: [id])

  @@index([roleId])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  name        String   @db.VarChar(255)
  description String   @db.Text
  userId      String
  forms       Form[]
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Form {
  id                   String       @id @default(cuid())
  createdAt            DateTime     @default(now())
  name                 String       @db.VarChar(255)
  submissionCount      Int          @default(0)
  notificationSettings Json
  projectId            String
  submissions          Submission[]
  fields               Field[]
  project              Project      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectId])
}

model Field {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  key       String
  label     String    @db.VarChar(255)
  type      FieldType
  required  Boolean
  formId    String
  form      Form      @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([formId])
}

model Submission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  rawdata   Json
  formId    String   @db.VarChar(255)
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([formId])
}

enum FieldType {
  TEXT
  NUMBER
  EMAIL
  DATE
  CHECKBOX
  RADIO
  SELECT
  TEXTAREA
}
